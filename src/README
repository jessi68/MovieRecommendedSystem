--database 설정하는데 필요한 command

docker start container_name
docker exec -i -t container_name bash
su - postgres
(if "psql: error: FATAL role "postgres" does not exist"
occurs, then type "psql --username souyoon --dbname springdata")
psql spring data


sql 문에서 ? 에 무슨 값이 들어가있는지 알려면
logging.level.org.hibernate.type.descriptor.sql=trace
를 application.properties 에 추가하면 된다.


docker start postgres_boot && docker exec -i -t postgres_boot bash
psql --username souyoon --dbname springdata



public void crud() throws IllegalAccessException, ExecutionException, InterruptedException {
        // Given
        /*Movie movie = new Movie();
        movie.setTitle("hello spring boot common");

        assertThat(movie.getId()).isNull();

        // When
        Movie newMovie = movieRepository.save(movie);

        //Then
        assertThat(newMovie.getId()).isNotNull();*/

        Optional<Movie> byId = movieRepository.findById(100l);
        assertThat(byId).isEmpty();
        Movie movie = byId.orElse(new Movie());
        //movieRepository.save(null);
        Movie movie1 = byId.orElseThrow(IllegalAccessException::new);

        /*
        //When
        List<Movie> movies = movieRepository.findAll();
        //Then
        assertThat(movies.size()).isEqualTo(1);
        assertThat(movies).contains(movie);

        //When
        Page<Movie> page = movieRepository.findAll(PageRequest.of(0, 10));

        //Then
        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getNumber()).isEqualTo(0);
        assertThat(page.getSize()).isEqualTo(10);
        assertThat(page.getNumberOfElements()).isEqualTo(1);
        */
        // When
        /*page = movieRepository.findByTitleContains("spring", PageRequest.of(1, 10));
        //Then
        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getNumber()).isEqualTo(0);
        assertThat(page.getSize()).isEqualTo(10);
        assertThat(page.getNumberOfElements()).isEqualTo(1);*/

        /*Movie movie3 = new Movie();
        movie3.setTitle("disney");
        movie3.setLikeCount(100);
        movieRepository.save(movie3);

        PageRequest pageRequest = PageRequest.of(0, 10, Sort.by(Sort.Direction.DESC, "LikeCount"));
        ListenableFuture<List<Movie>> movies = movieRepository.findByTitleContainsIgnoreCase("Disney", pageRequest);

        List<Movie> m = movies.get();

        m.forEach(System.out::println);
       // assertThat(movies.size()).isEqualTo(1);

        // assertThat 이 return 하는 객체는 hasFieldOrPropertyWithvalue(property, value) 라는 멤버함수 가짐

    }


기능 요구사항
1.[o] 파일로부터 movie data 불러와서 'movie' table 에 저장하는 기능
2.[x] 파일로부터 장르데이터 불러와서  'genre' table 에 저장하는 기능
3.[x] 2를 한 이후,